function [y1] = NNn9(x1)
% This neural network is trained at 9dB 

% Generated by Neural Network Toolbox function genFunction, 29-Nov-2016 22:11:27.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 13xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [-28.2728978756555;-35.0313647778361;3.66702395065993;-28.2775322811001;-15.3682489353481;0.496076664138567;-2116.70881931036;-3098.81150306962;11.5727411450025;-2016.52860211004;-1028.28173087502;-4135.66011020931;-909.481988449639];
x1_step1_gain = [0.0426568844440856;0.0176652948063367;0.0012360219201974;0.0427631784135833;0.0734811382411406;0.001236627578532;0.000235821969921882;0.000452974855139668;1.4588334257199e-05;0.000242225024285574;0.00107526267958941;0.000169811593795947;0.00111233075456426];
x1_step1_ymin = -1;

% Layer 1
b1 = [-3.512236686114989;-2.4895794376138585;-4.5419440537437801;1.5820986271971653;1.0754120995235381;-1.8687194852283944];
IW1_1 = [2.0441630088736273 -0.48833355072234724 -2.0623414635131754 -1.1050375176553087 1.6436000845512477 -2.5231127338934769 0.19115036450879266 -1.3902659552915577 0.92445862129420031 0.69607838788520926 2.4937356438410125 -0.22782270155702974 -0.22962896702672386;-0.38943053534906352 -0.13149791723222881 1.2216172820654208 -0.44829712640088321 -0.086996272609136685 1.3726813825070425 1.2927915618433565 -1.1056424214432556 1.1984813623146162 1.2209055286389798 -0.066397774379056432 -0.35584139666848053 -0.52150018956457123;1.0098506301962271 -11.741059229183373 -0.79188618084754714 2.7744318226099725 8.9401571038812104 -1.6899165246851506 1.674469370639293 -1.6944790586119503 2.6867655294137665 0.79782897141934517 0.0039476197329203783 -0.37679591685944158 1.0487837018096473;-5.3465557101581656 -4.5200532714270265 2.3801499909917738 3.3882422855313772 5.9032650787713958 2.4075322527314658 -1.2421429627098624 -0.26398885302542302 -1.3254888500338409 -0.85861085835458906 -2.5277374286311689 0.085413459603309844 -0.4234757242990671;0.60916892426608371 -0.36152090437727818 0.16524769762188091 -0.35946413242983088 0.52439725060061537 -0.61397294721393003 -0.42012437753092419 0.57631177645376452 -0.50056709690587931 -0.73396261302492827 0.64579615031467863 -0.15515416788644829 0.35523476581679819;-0.30801346287680659 -0.31622709116996661 0.098140298925846192 -0.55734284082703189 -0.060132581107686191 0.73425294041879263 0.61902169257413264 0.51029695922335372 0.085393552783298701 -0.41300512077970775 -0.50380796272823758 0.16222191327914787 0.57958021388398151];

% Layer 2
b2 = [-1.429329183072461;-0.18651620544108377;-0.21391383370725164;-0.053484983235919624;0.80352490202131255;0.25331871215897839];
LW2_1 = [1.3861422080352042 0.83832270883515581 -9.0642068485421596 -11.27953864376701 -0.36269995064762095 0.92560310020835501;4.3029161818766761 0.39045559825454357 14.855490805737858 2.4515617375032375 -1.1071260188487992 -0.23176131494387911;-0.60701398089641989 -0.32690252057483243 5.6727595676426796 4.9810974689303071 0.62024301181806174 -0.17190919250840558;0.86160364479148388 -0.81784385427371831 -7.689739272216924 -2.8732906397660938 -0.52531770066710837 -1.2241575253068298;-2.7002509504658194 -0.03531470135928335 -1.2632598508052673 3.1999964477623335 0.95020654630079915 -0.18546659947911243;-2.4096364967383974 -0.87790026548836264 -1.5029047991200535 3.6567164333336923 -0.26590759929302427 -0.75167894363226651];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numer = exp(n);
denom = sum(numer,1);
denom(denom == 0) = 1;
a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
