function [y1] = NN3dB(x1)
% This neural network is trained at 3dB 
%
% Generated by Neural Network Toolbox function genFunction, 29-Nov-2016 21:44:06.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 13xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [-0.772567579917793;-1.30367502846666;1.15651490131963;-2.09889376263168;-2.09352477259443;-1.85267880723471;-1.98423927492414;-7.47147193936438;1.37893183575465;-1.75757233694278;0.287775560558287;-18.2907200484466;1.1383811884297];
x1_step1_gain = [1.02296244647057;0.357526897135885;0.180276660520729;0.700892696944244;0.706019637568554;0.17599942230547;0.431398147940285;0.132490057145648;0.0239001222911829;0.105259519506114;0.0425211115241464;0.0287357252767601;0.12525440748036];
x1_step1_ymin = -1;

% Layer 1
b1 = [1.4253828242491844;-0.13748658794270671;0.81210385961438358;-0.68129136265434742;0.52893527580505784;1.4292213487426675];
IW1_1 = [-1.9999963990047807 0.42251369726092575 0.12104947557357357 -1.1231200789176636 0.17847763557177665 0.15297887931825321 -0.82201172100354813 -1.0311446776301707 0.64145971798768875 -1.2281365348971938 0.14244438387929731 -0.002381461796210202 -0.68082442356528883;2.2312628470019567 -1.2574527257014059 -0.031725435906327551 0.79204277878400453 1.9286851842736705 -0.57378212349893787 -0.46402207253070149 1.1270887386506723 -0.69619600208501697 0.14257723193214716 -0.0095260766028920259 -0.33541523307588134 1.9132630732252423;2.8021339508439924 1.4326417927808448 -0.19726673116131815 0.87182997109392535 -1.1509915395704318 -0.7905320546513146 -0.5855766224029666 1.6231879030519516 0.16778343241325905 -0.080221886837908568 -1.2267850303026278 0.46566742014066703 0.079756760249146005;3.8329308453150253 -0.32782226975567746 0.43136449831451074 3.4189507802776276 1.6808844951516375 -0.4792645225502733 -0.30428427614733439 0.57784955281108108 -0.11801824899175729 -1.1557854994353087 -3.6377212746367276 -0.17933621733155419 1.9622859079951536;2.1503338944873187 1.6548234018714985 -0.63021525551062707 -0.15814979037701593 -1.3467281124197099 -0.75043733992316364 -1.8350372274933007 0.079914030368611735 -0.046034849173179668 0.84804788587318736 0.37322836290743849 0.070954361706500504 -0.86535648767800288;-2.4068655978076969 0.28686665884731866 0.53945190156700062 -1.3838849981135828 -1.4207851906571765 -0.51540629837517848 0.79709570618388614 -0.32643444330052845 0.22662654030410401 0.78427775838905167 0.052563600400422975 1.1490678318589334 -0.69841135534615528];

% Layer 2
b2 = [0.55454369586197216;-0.58262901138996437;-0.64455201117560035;0.66062087511475198;0.59674259313428368;-0.1119409042887575];
LW2_1 = [-2.8193650170993405 2.5161489118055433 0.66001157819334544 -2.5726346012199421 1.0485225819703332 1.5917323326342727;-3.1658790078980186 2.8072489068213509 1.5243434569276675 1.6855833151290567 0.35721419757226552 -2.2690840043720795;1.1230306317805483 2.6695420840722854 -0.16923298414689936 3.3719920649319031 -2.3350728258039477 -2.5678818962671595;1.5216107960043912 -1.0498634170054826 2.2845734185846971 0.89573870542360134 3.5030030966096319 -0.077923908898271499;0.66617496228934392 -2.7549207518032506 0.6352647339389017 3.2542523757506174 -2.2134707679709287 0.30399212778735568;0.57308692107091841 -2.7939965132769125 -4.2281087924135194 -6.0438927163160487 -1.0962568518054179 2.5791822340905721];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numer = exp(n);
denom = sum(numer,1);
denom(denom == 0) = 1;
a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
