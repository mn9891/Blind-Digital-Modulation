function [y1] = NN15dB(x1)
% This neural network is trained at 15dB 
%
% Generated by Neural Network Toolbox function genFunction, 29-Nov-2016 19:24:45.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 13xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [-0.587900031908805;-0.39050744208821;1.00886067627214;-2.02032207986662;-2.02100519259667;-1.99108090966889;-0.760379386951111;-1.44186637868539;1.02105702758831;-0.654732352831131;0.692807725616818;-5.66863963720669;1.51187746685035];
x1_step1_gain = [1.24867580976314;1.18059034031721;2.54310739469104;0.730605124103486;0.727047033342821;1.14304736325296;1.11100243111132;0.672927881674498;0.756606744000359;0.118348060471459;0.109561587724653;0.110174421709613;0.135664732150754];
x1_step1_ymin = -1;

% Layer 1
b1 = [-0.98892666809303409;0.85908197716072188;1.0765671349661767;0.54082071254031494;0.019191154187994514;-1.4921181455484345];
IW1_1 = [0.44881958746068645 -1.784683441955355 0.0093227762008437666 1.2370927765691064 1.9477716422824591 1.4233045052405209 0.42584390473840023 -0.50470316270060267 -0.4125320365728547 -0.62124407484047817 -1.0164886893845171 -1.5255752351165814 -0.046740618046613842;-2.6741391961168897 0.027246498198224861 -0.19648715502139613 -1.9582877066155053 -2.2396025478094335 0.44769667698457249 2.3939996912073536 -2.8914814471259085 0.88363910969254456 1.3115589180562472 -0.34317858719268213 0.94575917470630844 0.13712214068328671;-0.54772707014834854 -2.0162912817535115 -2.5335863017139659 -0.69378806920468228 0.50944031040493143 -0.88723815715391119 2.5752769067889361 -0.60767339202815596 -2.7656043428402439 -0.9522617702587598 -0.49825364855418325 -1.8011826096424324 1.5764270490508439;2.6588143482690092 1.5681009803067718 -0.52454135812184033 -0.040743861840348727 0.16076666297423423 -0.57429335627307054 -1.2029248674972901 2.9654820745536781 0.76673704525673791 0.79980631679398684 0.61943713054221228 -0.025554461666562785 0.23460946221617518;-3.3972693193804164 -0.59940182300608502 -0.22393555328412917 -0.90145927334849174 1.5047517655158911 0.67417360956057948 -0.34234837532972684 1.1701230232271329 1.9207435482148087 -0.66546971759650064 8.9829627954933748 -0.47971511864515265 -4.7610420231432196;-0.089333583468801075 -0.12770282273708325 0.34620744819044103 0.060176601773820039 -0.89477599934866414 -0.58192104108196474 1.1426735735957536 0.62407368555415366 -0.70437773459321706 0.73984630022473519 0.70661321238963182 0.87941384028252478 0.62880009920032054];

% Layer 2
b2 = [0.89087685761852919;-0.91585201799867899;-1.0040510143892976;1.2944861879151826;0.052254181378960173;0.83943941380189779];
LW2_1 = [-1.4460370175681232 2.9866182928189948 3.1229481451576984 4.5754194431980801 -0.21851159196357545 4.1109316104382776;3.423818968048336 -5.0420994752352302 1.8974048221998367 4.807137082169942 -0.18354085837679615 0.59480114524221883;-0.89152581778975803 -5.9435783693172519 1.045395374344595 -5.7537460720665514 -1.8828600612567283 -0.12997208838905602;-3.1090337843330405 -1.6296568101422497 -3.7529882502536287 2.7403281740681202 -1.5400125130807192 -1.7077162897223366;-0.83794044513561272 6.1397901423256389 -1.1797805968881236 -2.2690237082083451 -5.3482478746011664 -1.9910439942443487;0.61193058579352866 2.9161159704704946 -0.38468566871231114 -2.2024022803443404 6.1395263401281586 -0.77569667679277599];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numer = exp(n);
denom = sum(numer,1);
denom(denom == 0) = 1;
a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
